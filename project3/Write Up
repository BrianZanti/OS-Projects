The first step in my program is to read the input. It opens a file called "soduku.txt" and stores its contents into a string. The program enters into a 9 by 9 for loop and breaks the string up char by char, converts the char to an int, and stores it in the appropriate index of a 9 by 9 int array.

The next step is to kick off all the worker threads. I chose to do 27 different threads, one for each row, one for each column, and one for each subgrid. I chose to this because I thought each thread should do the same amount of work, so they should check the same ammount of data. I first allocate 27 different chunks of memory for storing the thread ids. I also allocate 27 different chunks of memory for passing each thread its arguments. The arguments are contained in a struct called threadArguments, which contains a pointer to the first element that thread should check, the index of which row/column/subgrid this element belongs to, and a pointer to a bool value to indicate if the thread found an error. In retrospect, it would have been easier to declare my 9 by 9 integer array of the puzzle as a global variable and simply pass the thread the index and bool pointer, however my solution is still effective even if the code is slightly more complicated. My program then starts each thread and stores its id. Then the program calls pthread_join on each of these ids to wait for each thread to finish.

Each thread executes with the same general approach. First, it casts the argument pointer as a threadArguments struct pointer. It then creates an array of 9 booleans with initial value of false. Each spot in this array corresponds to whether one of the numbers one through nine is present in the row/column/subgrid this thread is responsible for. The thread then uses the pointer it was passed as an argument to loop through all the values it is responsible for. The math of how to index the data varries depending on what type of data the thread is responsible for checking. For example, the row checker can just index with values zero through eight since the row data is stored continuously, but for columns those values must be multiplied by 9 since you must skip an entire row to get to the next column value. For each value contained in that thread's set of data, it changes the appropriate value in the bool array to true. If any value in that array is not changed to true, that value is thus missing, and the thread prints the appropriate error, and updates the value stored at the bool pointer it was passed to true to indicate an error. 

When all threads complete, the main program checks whether the bool value it passed to each thread was changed to true. If it wasn't, meaning there was no error, then main prints a message saying the solution was correct.


