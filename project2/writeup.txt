The Best Shell Ever

By Nathan Farmer and Brian Zanti

Our implementation for the solution to this project begins with parsing through the commands that are inputted into the shell. This begins with understanding and properly representing the lexical structure of the commands. We began by splitting token groups on the pipe. We constructed a function, called tokenize(), that would split the command into token groups based on an input we provided. Initially, we split on the pipe character, then once the token groups were separated we used our tokenize() function again to split on the spaces between commands. We did this so we could add each command to an array to keep track of it for future use. We then had to verify that each token was valid according to the given specifications. We checked to see if the tokens contained only alphanumeric characters or the acceptable special characters. If there was an invalid character in a token then we printed out an error message and moved on to the next line of input. By being able to the do this we are able to determine which lines of input are valid for the shell to process. Using a state machine in our parsing process would have been much more helpful but by the time that idea had presented itself to us we were already well on our way to finishing up the parsing portion of this assignment. Once all of the commands have been parsed, stored, and validated we move on to the steps involving redirection and piping. 
If our command list had only one token group, then our handle_redirects() function would fire, as this indicates that it contains only redirects and not pipes. This function opens and closes the necessary files for the operation based on the input and location of the redirection operators. Once the proper course of action has been determined, a forked process is created. It is in the parent process that the switching of the stdin with the output text file and the stdout with the input text file occurs. It then closes the files when it is done with them but this must be done with care because if done out of order, serious problems such as segmentation faults will occur. If an inputfile cannot be opened then an error message stating so will be printed out. If an outputfile does not exist then this function will create one for you to store the data in. While all of this is occurring the child process is waiting for the parent process to finish up so it can move on.
Piping is along the same lines as I/O redirection but is a little trickier. First, we call fork() to create a driver parent that will ensure completion of piping before continuing the shell program. Next we create two integer arrays of size two to store the file descriptors. We iterate over each piped command, creating a new process using fork for each. In the child process, one set of file descriptors represents the pipe preceeding the command and one the pipe following the command. We then use the dup2 command to change the output/input if it is appropriate, for example it is not appropriate to change the input of the first command. After using dup2, the file descriptors must also be closed. In the parent process, the parent process increments the file descriptor arrays to represent the appropriate pipe, and makes sure to close file descriptors that are no longer used. At the end of our handle_pipes function, a new process will have been created for each command with pipes connecting them, and after the final command is executed and prints to stdout, the driver parent releases control and the program continues.


main.cpp:

#include <string>
#include <iostream>
#include <stdio.h>
#include <vector>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>

using namespace std;

vector<string> tokenize(string input, string delim){
	vector<string> token_groups;			
	int pos = 0;
	while(1){
		pos = input.find(delim, 0);
		if(pos == -1) {
			token_groups.push_back(input.substr(0, input.size()));
			break;
		}		
		token_groups.push_back(input.substr(0,pos));		
		input = input.substr(pos+delim.size(), input.size());
	}
	return token_groups;
}

bool validate_token(string token_group) {
	int i = 0;
	for(i; i < token_group.size(); i++) {
		if(! isalnum(token_group[i])) {
			if(token_group[i] == '.'
				|| token_group[i] == '-' 
				|| token_group[i] == '/' 
				|| token_group[i] == '_') {
			}
			else{ 
				return false;
			}
		}
		
	}
	return true;
}

void handle_redirects(vector<string> commands) {
	int in, out;
	int i = 0;
	string inputfile, outputfile;
	char * arg0 = &commands[0][0];
	char ** args;
	int numArgs = 0;	
	bool commandFinished = false;
	for(i; i < commands.size(); i++) {
		if(commands[i].compare("<") == 0){
			inputfile = commands[i+1];
			commandFinished = true;
		}
		else if(commands[i].compare(">") == 0){
			outputfile = commands[i+1];
			commandFinished = true;
		}
		else if(!commandFinished) {
			args[i] = &commands[i][0];
			numArgs++;
		}
	}
	args[numArgs] = NULL;
	pid_t pid = fork();
	if(pid == 0){
			if(in = open(&inputfile[0], O_RDONLY))
			{
				dup2(in, 0);
				close(in);
			}
			else
			{
				cout << "Error opening file" << endl;
				return;
			}
			if(out = open(&outputfile[0], O_WRONLY | O_TRUNC | O_CREAT, S_IRUSR | S_IRGRP | S_IWGRP | S_IWUSR))
			{
				dup2(out, 1);		
				close(out);
			}
			else
			{
				cout << "Error opening file" << endl;
				return;
			}
			execvp(arg0, args);
	}
	else {
		int returnStatus;
		waitpid(pid, &returnStatus, 0);	
		if(returnStatus != 0)
		{		
			cout << "Command did not exit normally." << endl;
		}
	}
}

void handle_pipes(vector<vector<string> > commands) {	
	pid_t driverPid = fork();
	if(driverPid == 0)
	{
		int i = 0;
		int oldfd[2];
		int newfd[2];
		for(i; i < commands.size(); i++)
		{
			pipe(newfd);
			char* args[commands[i].size()];
			int j = 0;
			int numArgs = 0;
			for(j; j < commands[i].size(); j++)
			{
				args[j] = &commands[i][j][0];
				numArgs++;
			}
			args[numArgs] = NULL;
			pid_t pid;
			if(i == commands.size() - 1)
			{
				pid = 0;
			}
			else
			{
				pid = fork();
			}
			if(pid == 0)
			{	
				if(i != 0)  //handle redirection input
				{		
					dup2(oldfd[0], 0);	
					close(oldfd[0]);
					close(oldfd[1]);
				}
				if(i != commands.size()-1) //handle redirecting output
				{				
					dup2(newfd[1], 1);					
					close(newfd[0]);
					close(newfd[1]);
				}
				execvp(args[0],args);
			}
			else
			{
				if(i != 0)
				{
					close(oldfd[0]);
					close(oldfd[1]);
				}
				if(i != commands.size()-1)
				{
					oldfd[0] = newfd[0];
					oldfd[1] = newfd[1];
				}
			}

		}
	}
	else
	{
		int returnValue;
		waitpid(-1, &returnValue, 0);
	}
}

int main(int argc, char** argv){
	string input;	
	string token_groups[25];
	bool testing = false;
	if(argv[1] != NULL){
		testing = string(argv[1]).compare("-t") == 0;		
	}	
	while(1){		
		if(!testing){
			cout << ">";
		}	
		getline(cin, input);
		if(input.size() > 100)
		{
			cout << "Error: cannot read lines of greater than 100 characters." << endl;
		}
		else{
			if(input.compare("exit") == 0 || input.compare("") == 0)
			{
				break;
			}
			vector<string> token_groups = tokenize(input, " | ");
			vector<vector<string> > commands;			
			int i = 0;
			bool valid = true;
			bool hasInputRedirect = false;
			bool hasOutputRedirect = false;

			for(i; i < token_groups.size(); i++)
			{				
				vector<string> command = tokenize(token_groups[i], " ");
				commands.push_back(command);
				int j = 0;
				for(j; j < command.size(); j++)
				{			
					if( !(validate_token(command[j]))){						
						if(token_groups.size() != 1 || (command[j].compare(">") != 0 && command[j].compare("<") != 0))
						{
							valid = false;
						}
						if(command[j].compare("<") == 0 )
						{
							if(hasInputRedirect || hasOutputRedirect || j == 0 || j != command.size() - 2)
							{
								if(j+2 < command.size()){
									if(command[j+2].compare(">") != 0)
									{
										valid = false;
									}
								}

							}
							else 
							{
								hasInputRedirect = true;
							}							
						}
						else if(command[j].compare(">") == 0)
						{
							if(hasOutputRedirect || j == 0 || j != command.size() - 2)
							{		
								valid = false;									
							}
							else
							{
								hasOutputRedirect = true;
							}
						}
					}					
				}
			}

			if(valid) {
				if(testing){			
					cout << input << " is a valid statement" << endl;	

				}
				if(commands.size() > 1){
					handle_pipes(commands);
				}
				else{
					handle_redirects(commands[0]);
				}
			}
			else {
				cout << "Invalid command" << endl;	
			}
			

		}
	}
	return 0;
}
